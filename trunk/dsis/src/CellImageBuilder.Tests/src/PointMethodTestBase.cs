using DSIS.CellImageBuilder.PointMethod;
using DSIS.CellImageBuilder.Shared;
using DSIS.IntegerCoordinates;
using DSIS.IntegerCoordinates.Tests;
using NUnit.Framework;

namespace DSIS.CellImageBuilder.Tests
{
  public abstract class PointMethodTestBase<T, Q> :
    MethodTestBase<T, Q, PointMethod<Q>, PointMethodSettings>
    where T : IIntegerCoordinateSystem<Q>
    where Q : IIntegerCoordinate
  {
    private static PointMethodSettings POINT
    {
      get { return new PointMethodSettings {Points = 2, UseOverlapping = false, Overlap = 0}; }
    }

    private static PointMethodSettings OVERLAPPED
    {
      get { return new PointMethodSettings {Points = 2, UseOverlapping = true, Overlap = 0.3}; }
    }

    [Test]
    public void Test_01()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);

      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = ins[0];
                       outs[1] = ins[1]/7;
                     }, new PointMethodSettings {Points = 2},
                   @"-------------------
..........
..........
..........
..........
..........
x.........
x.........
..........
..........
..........
-------------------
");
    }


    [Test]
    public void Test_02_Point()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);

      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = ins[0];
                       outs[1] = ins[1];
                     }, POINT,
                   @"-------------------
..........
..........
..........
..........
..........
.....xx...
.....xx...
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_03_Point()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 5;
                       outs[1] = 5;
                     }, POINT,
                   @"-------------------
..........
..........
..........
..........
..........
.....x....
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_04_Point()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(2, 2),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 2*ins[0];
                       outs[1] = 2*ins[1];
                     }, POINT,
                   @"-------------------
..........
..........
..........
..........
....x.x...
..........
....x.x...
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_05_Point()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 0.1*ins[0];
                       outs[1] = 7*ins[1];
                     }, POINT,
                   @"-------------------
.......x..
..........
..........
..........
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_06_Point()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 3 + 0.1*ins[0];
                       outs[1] = 7*ins[1] - 2;
                     }, POINT,
                   @"-------------------
..........
..........
..........
.....x....
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_07_Point()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 3.45 + 0.001*ins[0];
                       outs[1] = 0.001*ins[1] + 2.66;
                     }, POINT,
                   @"-------------------
..........
..........
..........
..x.......
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_08_Overlapped()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);

      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = ins[0];
                       outs[1] = ins[1];
                     }, OVERLAPPED,
                   @"-------------------
..........
..........
..........
..........
..........
.....xx...
.....xx...
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_09_Overlapped()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 5;
                       outs[1] = 5;
                     }, OVERLAPPED,
                   @"-------------------
..........
..........
..........
..........
..........
.....x....
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_10_Overlapped()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(2, 2),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 2*ins[0];
                       outs[1] = 2*ins[1];
                     }, OVERLAPPED,
                   @"-------------------
..........
..........
..........
..........
....x.x...
..........
....x.x...
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_11_Overlapped()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 0.1*ins[0];
                       outs[1] = 7*ins[1];
                     }, OVERLAPPED,
                   @"-------------------
.......x..
..........
..........
..........
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_12_Overlapped()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 3 + 0.1*ins[0];
                       outs[1] = 7*ins[1] - 2;
                     }, OVERLAPPED,
                   @"-------------------
..........
..........
..........
.....x....
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_13_Overlapped()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = 3.45 + 0.001*ins[0];
                       outs[1] = 0.001*ins[1] + 2.66;
                     }, OVERLAPPED,
                   @"-------------------
..........
..........
..........
..x.......
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_14_PointX()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);

      DoTwoDimTest(ics, ics.Create(2, 2),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = ins[0];
                       outs[1] = ins[1]*3;
                     }, new PointMethodSettings {Points = 2},
                   @"-------------------
..........
..........
......x..x
......x..x
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_15_OverlappedX()
    {
      var ss = new MockSystemSpace(2, new double[] {0, 0}, new double[] {10, 10}, new long[] {10, 10});
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);

      DoTwoDimTest(ics, ics.Create(2, 2),
                   delegate(double[] ins, double[] outs)
                     {
                       outs[0] = ins[0];
                       outs[1] = ins[1]*3;
                     }, new PointMethodSettings {Points = 3, UseOverlapping = true, Overlap = 0.3},
                   @"-------------------
                    ..........
                    ..........
                    ......x..x
                    ......x..x
                    ..........
                    ..........
                    ..........
                    ..........
                    ..........
                    ..........
                    -------------------
                    ");
    }
  }
}