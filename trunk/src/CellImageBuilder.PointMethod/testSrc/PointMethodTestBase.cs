using DSIS.CellImageBuilder.Shared;
using DSIS.IntegerCoordinates;
using DSIS.IntegerCoordinates.Impl;
using DSIS.IntegerCoordinates.Tests;
using NUnit.Framework;

namespace DSIS.CellImageBuilders.PointMethod.testSrc
{
  [TestFixture]
  public class PointMethodTest : PointMethodTestBase<IntegerCoordinateSystem, IntegerCoordinate>
  {
    
  }

  public abstract class PointMethodTestBase<T, Q> :
    MethodTestBase<T, Q, PointMethod<T, Q>, PointMethodSettings>
    where T : IIntegerCoordinateSystem<Q>
    where Q : IIntegerCoordinate<Q>
  {
    private readonly PointMethodSettings stategy = new PointMethodSettings(new int[] {2, 2});
    private readonly PointMethodSettings stategy2 = new PointMethodSettings(new int[] {2, 2}, 0.3);

    [Test]
    public void Test_01()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);

      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = ins[0];
                     outs[1] = ins[1] / 7;
                   }, new PointMethodSettings(new int[]{2,2}),
                   @"-------------------
..........
..........
..........
..........
..........
x.........
..........
..........
..........
..........
-------------------
");
    }


    [Test]
    public void Test_02()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);

      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = ins[0];
                     outs[1] = ins[1];
                   }, stategy,
                   @"-------------------
..........
..........
..........
..........
..........
.....x....
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_03()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 5;
                     outs[1] = 5;
                   }, stategy,
                   @"-------------------
..........
..........
..........
..........
..........
.....x....
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_04()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(2, 2),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 2 * ins[0];
                     outs[1] = 2 * ins[1];
                   }, stategy,
                   @"-------------------
..........
..........
..........
..........
....xx....
....xx....
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_05()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 0.1 * ins[0];
                     outs[1] = 7 * ins[1];
                   }, stategy,
                   @"-------------------
.......x..
..........
..........
..........
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_06()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 3 + 0.1 * ins[0];
                     outs[1] = 7 * ins[1] - 2;
                   }, stategy,
                   @"-------------------
..........
..........
..........
.....x..x.
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_07()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 3.45 + 0.001 * ins[0];
                     outs[1] = 0.001 * ins[1] + 2.66;
                   }, stategy,
                   @"-------------------
..........
..........
..........
..x.......
..........
..........
..........
..........
..........
..........
-------------------
");
    }
    [Test]
    public void Test_08()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);

      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = ins[0];
                     outs[1] = ins[1];
                   }, stategy2,
                   @"-------------------
..........
..........
..........
..........
..........
.....x....
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_09()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(5, 5),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 5;
                     outs[1] = 5;
                   }, stategy2,
                   @"-------------------
..........
..........
..........
..........
..........
.....x....
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_10()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(2, 2),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 2 * ins[0];
                     outs[1] = 2 * ins[1];
                   }, stategy2,
                   @"-------------------
..........
..........
..........
..........
....xx....
....xx....
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_11()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 0.1 * ins[0];
                     outs[1] = 7 * ins[1];
                   }, stategy2,
                   @"-------------------
.......x..
..........
..........
..........
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_12()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 3 + 0.1 * ins[0];
                     outs[1] = 7 * ins[1] - 2;
                   }, stategy2,
                   @"-------------------
..........
..........
..........
.....x..x.
..........
..........
..........
..........
..........
..........
-------------------
");
    }

    [Test]
    public void Test_13()
    {
      MockSystemSpace ss = new MockSystemSpace(2, new double[] { 0, 0 }, new double[] { 10, 10 }, new long[] { 10, 10 });
      T ics = IntegerCoordinateSystemFactory.CreateCoordinateSystem<T, Q>(ss);


      DoTwoDimTest(ics, ics.Create(1, 1),
                   delegate(double[] ins, double[] outs)
                   {
                     outs[0] = 3.45 + 0.001 * ins[0];
                     outs[1] = 0.001 * ins[1] + 2.66;
                   }, stategy2,
                   @"-------------------
..........
..........
..........
..x.......
..........
..........
..........
..........
..........
..........
-------------------
");
    }
  }
}
